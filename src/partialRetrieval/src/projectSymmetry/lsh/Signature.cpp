#include <iostream>
#include <vector>
#include <shapeDescriptor/utilities/fileutils.h>
#include <shapeDescriptor/utilities/print/QuicciDescriptor.h>
#include "Signature.h"
#include "Permutation.h"

/*
void computeDescriptorSignature(ShapeDescriptor::QUICCIDescriptor descriptor, std::vector<int>* signaturePtr, std::vector<std::vector<int>> permutations) {
    
    for (int p = 0; p < permutations.size(); p++) {

        std::vector<int> permutation = permutations[p];
        int m = 0;
        bool quicciBit = false;
        
        // improve this condition to be based on spinImagePixels etc.
        while (m < 1024) {
            // Old one-line version: (descriptor.contents[(permutation[m] / 32)] & (1 << (permutation[m] % 32)))
            unsigned int quicciRow = descriptor.contents[(permutation[m] / 32)];
            unsigned int quicciCol = permutation[m] % 32;
            quicciBit = quicciRow & (1 << quicciCol);
            if (quicciBit) {
                break;
            }
            m++;
        }
        // m is now the signature of this descriptor for the current permutation
        signaturePtr->push_back(m);
    }
}
*/

void computeDescriptorSignature(ShapeDescriptor::QUICCIDescriptor descriptor, std::vector<int>* signaturePtr, int numPermutations) {

    int permutation[1024] = {0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, 480, 512, 544, 576, 608, 640, 672, 704, 736, 768, 800, 832, 864, 896, 928, 960, 992, 961, 993, 929, 897, 962, 994, 865, 930, 898, 833, 995, 963, 866, 801, 931, 834, 899, 996, 769, 964, 867, 932, 802, 737, 997, 835, 900, 965, 770, 705, 868, 933, 998, 803, 966, 901, 738, 836, 673, 934, 771, 999, 869, 967, 804, 706, 902, 837, 935, 739, 641, 1000, 870, 772, 968, 903, 805, 674, 936, 838, 707, 871, 1001, 740, 904, 773, 969, 806, 609, 839, 937, 872, 642, 1002, 905, 741, 675, 708, 1, 774, 807, 33, 970, 840, 65, 2, 34, 873, 938, 97, 66, 1003, 129, 3, 98, 775, 35, 808, 742, 906, 67, 709, 130, 971, 161, 841, 99, 676, 1004, 36, 131, 4, 162, 874, 939, 68, 193, 643, 100, 163, 776, 972, 743, 194, 809, 610, 132, 710, 1005, 225, 907, 37, 5, 69, 195, 842, 577, 164, 940, 101, 677, 226, 973, 1006, 257, 1007, 875, 133, 196, 744, 227, 908, 1008, 703, 671, 974, 735, 639, 941, 711, 777, 165, 6, 644, 607, 258, 38, 767, 975, 1009, 810, 70, 575, 638, 606, 102, 670, 799, 289, 678, 228, 843, 702, 574, 543, 197, 976, 942, 134, 876, 831, 734, 637, 259, 909, 605, 1010, 669, 573, 542, 943, 511, 766, 863, 977, 290, 604, 166, 636, 701, 541, 798, 572, 895, 510, 611, 944, 479, 645, 229, 668, 910, 712, 745, 1011, 830, 540, 733, 39, 978, 260, 927, 877, 603, 7, 778, 844, 509, 811, 571, 635, 198, 911, 71, 862, 291, 945, 478, 765, 959, 539, 679, 700, 508, 447, 321, 894, 103, 570, 991, 667, 797, 477, 602, 1012, 538, 912, 979, 507, 1023, 926, 878, 732, 829, 446, 946, 634, 135, 322, 569, 476, 415, 537, 261, 699, 861, 845, 958, 913, 506, 879, 230, 764, 601, 812, 292, 445, 893, 646, 990, 666, 1013, 980, 475, 1022, 167, 568, 796, 612, 947, 779, 414, 925, 536, 731, 505, 880, 323, 633, 828, 746, 383, 914, 846, 600, 957, 444, 713, 698, 474, 1014, 860, 989, 763, 881, 981, 1021, 578, 567, 504, 413, 892, 813, 535, 665, 948, 199, 680, 847, 40, 924, 795, 443, 8, 730, 382, 632, 72, 956, 915, 1015, 473, 599, 988, 351, 262, 1020, 780, 827, 982, 293, 882, 697, 848, 353, 503, 859, 949, 104, 412, 762, 1016, 1019, 534, 891, 814, 566, 987, 923, 324, 955, 983, 916, 613, 664, 747, 442, 1017, 1018, 849, 354, 381, 631, 729, 472, 647, 794, 950, 986, 984, 883, 136, 985, 598, 815, 954, 826, 231, 350, 714, 917, 781, 696, 922, 951, 858, 502, 319, 890, 411, 533, 953, 850, 761, 952, 565, 816, 884, 663, 918, 921, 441, 355, 630, 471, 793, 728, 920, 919, 168, 889, 748, 380, 782, 851, 885, 857, 825, 681, 817, 597, 501, 695, 888, 294, 532, 886, 760, 349, 852, 579, 887, 564, 783, 410, 818, 662, 856, 715, 318, 792, 440, 287, 853, 325, 824, 727, 9, 629, 784, 470, 855, 854, 819, 749, 614, 596, 759, 41, 379, 823, 263, 820, 500, 791, 694, 200, 531, 785, 821, 822, 648, 563, 73, 750, 661, 682, 790, 726, 786, 356, 409, 348, 716, 758, 628, 787, 751, 789, 439, 788, 469, 595, 105, 693, 317, 752, 757, 286, 255, 725, 660, 753, 580, 562, 530, 499, 756, 754, 378, 755, 717, 692, 627, 724, 683, 385, 137, 594, 723, 718, 408, 649, 659, 691, 232, 719, 386, 722, 347, 438, 721, 468, 720, 626, 326, 615, 561, 690, 658, 529, 10, 684, 316, 498, 593, 689, 295, 223, 625, 285, 42, 657, 545, 169, 377, 254, 688, 650, 685, 687, 686, 387, 357, 407, 624, 656, 74, 592, 560, 437, 467, 581, 346, 655, 528, 616, 651, 623, 497, 591, 654, 106, 315, 264, 653, 191, 559, 201, 652, 376, 622, 284, 222, 590, 253, 617, 406, 527, 436, 138, 621, 558, 466, 345, 388, 11, 589, 496, 582, 618, 159, 620, 43, 557, 619, 314, 546, 526, 375, 588, 190, 327, 233, 75, 283, 170, 358, 221, 252, 556, 583, 405, 127, 435, 465, 587, 495, 107, 296, 344, 525, 555, 584, 158, 586, 12, 585, 313, 202, 95, 189, 139, 374, 554, 389, 220, 282, 547, 44, 524, 251, 418, 265, 417, 126, 404, 494, 63, 76, 464, 434, 343, 553, 157, 523, 171, 419, 31, 13, 94, 188, 234, 312, 108, 552, 548, 219, 281, 250, 373, 45, 522, 125, 551, 62, 549, 359, 328, 550, 493, 140, 14, 203, 77, 403, 156, 30, 297, 342, 420, 93, 463, 433, 521, 15, 46, 187, 390, 109, 311, 218, 266, 172, 280, 61, 16, 249, 124, 47, 78, 372, 520, 17, 29, 235, 155, 141, 48, 92, 18, 492, 79, 450, 110, 49, 186, 60, 341, 204, 80, 19, 402, 123, 50, 217, 451, 421, 519, 28, 81, 111, 310, 173, 248, 279, 20, 142, 462, 449, 51, 91, 329, 432, 112, 154, 82, 298, 360, 59, 113, 21, 52, 27, 143, 267, 83, 185, 122, 371, 114, 144, 518, 174, 22, 236, 90, 205, 26, 53, 145, 216, 84, 58, 23, 115, 391, 153, 24, 25, 175, 54, 247, 340, 146, 491, 57, 85, 176, 55, 121, 278, 56, 89, 309, 116, 177, 452, 184, 86, 206, 147, 401, 88, 87, 117, 120, 207, 152, 178, 237, 482, 208, 215, 118, 517, 119, 148, 268, 209, 481, 151, 149, 183, 422, 246, 299, 150, 179, 431, 238, 461, 370, 239, 330, 180, 210, 182, 240, 277, 181, 214, 308, 339, 211, 241, 213, 269, 212, 361, 245, 271, 270, 242, 244, 272, 243, 276, 300, 516, 400, 273, 275, 307, 302, 274, 303, 392, 301, 338, 490, 369, 331, 306, 304, 305, 334, 430, 333, 337, 335, 332, 336, 362, 368, 453, 460, 399, 365, 423, 367, 364, 366, 363, 393, 398, 515, 396, 397, 395, 429, 394, 483, 489, 428, 424, 427, 459, 426, 425, 454, 458, 457, 514, 488, 456, 455, 487, 484, 486, 513, 485};

    int valuesPer = int(1024/numPermutations);


    unsigned int m;
    
    for (unsigned int i = 0; i < numPermutations; i++) {

        for (unsigned int j = 0; j < valuesPer; j++) {

            m = i * valuesPer + j;
            bool quicciBit = false;

            // Old one-line version: (descriptor.contents[(permutation[m] / 32)] & (1 << (permutation[m] % 32)))
            unsigned int quicciRow = descriptor.contents[(permutation[m] / 32)];
            unsigned int quicciCol = permutation[m] % 32;
            quicciBit = quicciRow & (1 << quicciCol);
            if (quicciBit) {
                break;
            }
        }

        signaturePtr->push_back(m);
    }
}

double computeJaccardSimilarity(std::vector<int> signature1, std::vector<int> signature2) {

    unsigned int matchScore = 0;

    for (unsigned int k = 0; k < signature1.size(); k++) {
        if (signature1[k] == signature2[k]) {
            matchScore++;
        }
    }

    return (double) matchScore / signature1.size();
}